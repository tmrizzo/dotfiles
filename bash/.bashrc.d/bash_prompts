#!/usr/bin/env bash
# vim:fdm=marker
# PROMPT {{{
__prompt_command(){
# This needs to be first
local EXIT="$?"
PROMPT_DIRTRIM=2

# Colors
local RESET='\[\e[0m\]'
local RED='\[\e[1;31m\]'
local GREEN='\[\e[1;32m\]'
local BLUE='\[\e[1;34m\]'
local PURPLE='\[\e[1;35m\]'

PS1="" # start prompt as blank

# exit status check
if [[ $EXIT -ne 0 ]]; then
        # red if exit status is non-zero
        PS1+="${RED}[\w]${RESET}"
else
        PS1+="${GREEN}[\w]${RESET}"
fi

# for toolbox container environment
if [ -f /run/.containerenv ] && [ -f /run/.toolboxenv ]; then
     PS1="" # start prompt as blank
     if [[ $EXIT -ne 0 ]]; then
            PS1+="${RED}⬢ ${RED}[@\h \w]${RESET}"
     else
            PS1+="${RED}⬢ ${GREEN}[@\h \w]${RESET}"
     fi
fi

# git directory check
if git rev-parse --git-dir &>/dev/null; then
        # check if HEAD is detached from branch
        if [[ $(git status) =~ "detached" ]]; then
                BRANCH=$(git status | awk '/detached/ {print $4}')
        else
                BRANCH=$(git symbolic-ref --short HEAD)
        fi

        # check how many uncommitted changes
        ## condition check is in brackets to make sure it only reports a number < zero
        if [[ $(git status -s --porcelain --ignore-submodules=dirty) ]]; then
                DIRTY=$(git status -s --porcelain --ignore-submodules=dirty | wc -l)
                STATUS="${RESET}+${RED}${DIRTY}${PURPLE}"
        else
                STATUS=""
        fi

        PS1+="${PURPLE} (${BRANCH}${STATUS})${RESET}"
else
        PS1+=""
fi

PS1+="${BLUE}\n> ${RESET}"

}
PROMPT_COMMAND=__prompt_command

# }}}

